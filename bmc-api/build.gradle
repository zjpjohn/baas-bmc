apply plugin: "APICollector"
apply plugin: "APIJarProcess"

configurations {
    jaxDoclet
    runnerBaseSource
}

dependencies {
    jaxDoclet 'com.ai.runner.plugin:apicollector:1.4-SNAPSHOT'
    runnerBaseSource "com.ai.opt:opt-base:${optBaseVersion}:sources"

    
  //  compile "javax.validation:validation-api:1.0.0.GA"
	compile "org.hibernate:hibernate-validator:4.2.0.Final"      
}


buildscript {
    repositories {
        maven { url mavenPublicURL }
    }
    dependencies {
        classpath group: 'com.ai.runner.plugin', name: 'apicollectorplugin', version: '1.0'
        classpath group: 'com.ai.runner.plugin', name: 'apijarprocessplugin', version: '1.0'
    }
}


//打jar包
def apiJarProcessTask=task("apiJarProcessTask",type:com.ai.runner.gradle.plugin.jar.APIJarProcessTask){
	jarPaths=configurations.runnerBaseSource.files.asType(List)
    destinationDir file("$buildDir/opt-base")
}
//遍历目录，给各个参数赋值
def List<Map<String,String>> apiList = new ArrayList<Map<String,String>>();
Set<File> fileSet = fileTree(apiDir) { include '**/*.ini' }.getFiles();
for(File file:fileSet){
    File f1 = new File(file.getParent());
    String apiName =  f1.getName();
    String version = file.getText('UTF-8');

    Map<String,String> apiMap = new HashMap<String,String>();
    apiMap.put("apiName", apiName);
    apiMap.put("apiArtifactId", apiName);
    apiMap.put("apiTaskName", "A"+apiName);
    apiMap.put("apiVersion", version);
    apiList.add(apiMap);
}

def Map<String,Object> apiDocTaskMap = new HashMap<String,Object>();
//便利数据，为后收集数据做准备
def Map<String,Object> apiTaskMap = new HashMap<String,Object>();
for(Map<String,String> apiMap:apiList){
    String apiName = apiMap.get("apiName");
    String apiVersion = apiMap.get("apiVersion");
    String apiArtifactId = apiMap.get("apiArtifactId");
    String apiTaskName = apiMap.get("apiTaskName");
    def jarTask = task("${apiTaskName}Jar", type: Jar){
        version apiVersion
        baseName apiArtifactId
        from sourceSets.main.output
        destinationDir file("$buildDir/api-libs")
        include 'com/ai/baas/bmc/api/'+apiName+'/**'
        manifest {
            attributes 'artifactId': apiArtifactId, 'Built-By': builtBy,'Built-date': new Date().format('yyyy-MM-dd HH:mm:ss'),'Manifest-Version':apiVersion
        }
    }
    apiTaskMap.put(apiName, jarTask);
	//调用APICollectorTask，开始收集数据
    def apidocTask=task("${apiArtifactId}APIDoc",type:com.ai.runner.gradle.plugin.APICollectorTask){
    	dependsOn apiJarProcessTask
        esconfig = "[{ip:10.1.234.160, port:14999}]"
        source = fileTree(dir: 'src/main/java', include: 'com/ai/baas/bmc/api/'+apiName+'/**/*.java')+fileTree(dir:"$buildDir/opt-base", include:"**/*.java")
        docletpath = configurations.jaxDoclet.files.asType(List)
        //指定-doclet 的生成你格式
        docletClass = 'com.ai.runner.apicollector.doclet.APIDoclet'
        memberLevel = 'private'
        encoding = 'utf-8'
        belong='opt-baas'
        ownerType='baas'
        owner = 'baas-bmc'
        groupId = 'com.ai.baas.bmc'
        artifactId = apiArtifactId
        version = apiVersion
    }
    apiDocTaskMap.put(apiName, apidocTask);

}


task api2doc{
	dependsOn {
	   tasks.findAll { task -> task.name.endsWith('APIDoc') }
	}
}

publishing {
    publications {
        for(Map<String,String> apiMap:apiList){
            String apiName = apiMap.get("apiName");
            String apiVersion = apiMap.get("apiVersion");
            String apiArtifactId = apiMap.get("apiArtifactId");
            publishing.publications.create(apiName, MavenPublication) {
                groupId group
                artifactId apiArtifactId
                version apiVersion
                artifact  apiTaskMap.get(apiName)
                pom.withXml {
                    asNode().children().last() + {
                        delegate.dependencies {
                            delegate.dependency {
                                delegate.groupId("com.ai.opt")
                                delegate.artifactId("opt-base")
                                delegate.version(optBaseVersion)
                            }
                            delegate.dependency {
                                delegate.groupId("org.jboss.resteasy")
                                delegate.artifactId("resteasy-jaxrs")
                                delegate.version("3.0.11.Final")
                            }
                        }
                    }
                }
            }
        }
    }
    repositories {
        maven {
            url  publishURL
            credentials {
                username = publishUserName
                password = publishUserPassword
            }
        }
    }
}